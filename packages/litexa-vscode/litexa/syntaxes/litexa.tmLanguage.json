{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Litexa",
	"patterns": [
		{
			"include": "#regular_expressions"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#transitions"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#states"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#invalid"
		},
		{
			"include": "#identifiers"
		}
	],
	"repository": {
		"regular_expressions": {
			"patterns": [
				{
					"name": "string.regexp.litexa",
					"match": "\/([a-zA-Z0-9|*+()='<>!:?.,^${}\\[\\] ]|-|\\\\|\\\/|(\\[wWdDsSbBtnr*+.?]))+\/[gi]*"
				}
			]
		},
		"functions": {
			"name": "support.function.litexa",
			"match": "(\\b|(?<=\\.))[a-zA-Z0-9_]+(?=\\([\\)]*)"
		},
		"variables": {
			"patterns": [
				{
					"match": "(\\$|@)(?![a-zA-Z_]|$)",
					"name": "invalid.illegal.litexa"
				},
				{
					"name": "variable.language.litexa",
					"match": "(\\$[a-zA-Z_-]*|@[a-zA-Z_-]*|DEPLOY\\b|context\\b|litexa\\b)"
				},
				{
					"name": "variable.parameter.litexa",
					"match": "\\b([a-zA-Z_-]+)(?=\\.[a-zA-Z_-]+)"
				},
				{
					"name": "variable.parameter.litexa",
					"match": "(?<=\\.)([a-zA-Z_-]+)(\\b|(?= ))"
				}
			]
		},
		"comments": {
			"name": "comment.line.number-sign.litexa",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.litexa"
				}
			},
			"patterns": [],
			"end": "($)"
		},
		"states": {
			"patterns": [
				{
					"name": "markup.underline.litexa",
					"match": "^([a-zA-Z_-][a-zA-Z0-9_.-]+)\\s+$"
				}
			]
		},
		"transitions": {
			"patterns": [
				{
					"match": "(->|\\.\\.\\.)\\s*([a-zA-Z_.-]+)",
					"captures": {
						"1": {
							"name": "keyword.control.litexa"
						},
						"2": {
							"name": "markup.underline.litexa"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.litexa",
					"match": "(=|>|<|>=|<=|==|!=|===|\\|\\||&&|\\+|\\-|\\%|\\(|\\)|,|\\.)"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.litexa",
					"match": "\\b(and|as|buyInSkillProduct|cancelInSkillProduct|capture|card|define|directive|else|END|exclude|for|if|inputHandlerAction|inputHandlerEvent|jsonFiles|launch|LISTEN|local|log|logStateTraces|metric|not|or|otherwise|playMusic|pronounce|quit|reprompt|resume|say|set|setRegion|setResponseSpacing|soundEffect|stopMusic|switch|then|unless|upsellInSkillProduct|wait|when|with|apl|aplcommand|screen|startCustomEventHandler|startInputHandler|stopCustomEventHandler|stopInputHandler)([ ]|$)"
				},
				{
					"name": "markup.quote.say.litexa",
					"match": "\\b(say)\\b"
				}
			]
		},
		"strings": {
			"name": "string.interpolated.litexa",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"begin": "({)",
					"end": "(})",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.litexa"
						}
					},
					"endCaptures": {
						"1": {
							"name": "string.quoted.litexa"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "(\\$[a-zA-Z_-]*|@[a-zA-Z_-]*|DEPLOY\\b)(?=[a-zA-Z_.-]*\\()",
					"end": "(\\([^\\)]*\\))",
					"beginCaptures": {
						"1": {
							"name": "variable.language.litexa"
						},
						"2": {
							"name": "keyword.operator.litexa"
						}
					},
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					},
					"patterns": [
						{
							"name": "variable.parameter.litexa",
							"match": "(\\.)([a-zA-Z_-]+)(\\b|(?=\\())",
							"captures": {
								"1": {
									"name": "keyword.operator.litexa"
								},
								"2": {
									"name": "support.function.litexa"
								}
							}
						},
						{
							"name": "variable.parameter.litexa",
							"match": "(\\.)([a-zA-Z_-]+)(\\b|(?= ))",
							"captures": {
								"1": {
									"name": "keyword.operator.litexa"
								},
								"2": {
									"name": "variable.parameter.litexa"
								}
							}
						}
					]
				},
				{
					"match": "(\\$|@)(?![a-zA-Z_-]|$)",
					"name": "invalid.illegal.litexa"
				},
				{
					"begin": "(\\$[a-zA-Z_-]*|@[a-zA-Z_-]*|DEPLOY\\b)",
					"end": "(?<=[$@a-zA-Z_.-])(?=[^a-zA-Z_.-])",
					"beginCaptures": {
						"1": {
							"name": "variable.language.litexa"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.language.litexa"
						}
					},
					"patterns": [
						{
							"name": "variable.parameter.litexa",
							"match": "(\\.)([a-zA-Z_-]+)(\\b|(?= ))",
							"captures": {
								"1": {
									"name": "keyword.operator.litexa"
								},
								"2": {
									"name": "variable.parameter.litexa"
								}
							}
						}
					]
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.litexa",
					"match": "[0-9]+"
				},
				{
					"name": "constant.numeric.litexa",
					"match": "[0-9]+\\.[0-9]+"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.litexa",
					"match": "\\b(true|false|null)\\b"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"name": "invalid.illegal.litexa",
					"match": "\\b(undefined)\\b"
				}
			]
		},
		"identifiers": {
			"patterns": [
				{
					"name": "variable.parameter.litexa",
					"match": "\\b[a-zA-Z_]([a-zA-Z0-9_.]*)\\b"
				}
			]
		}
	},
	"scopeName": "source.litexa"
}
